//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConfigGen.Swampy.Service {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KeyPair", Namespace="http://schemas.datacontract.org/2004/07/Swampy.Business.Contract")]
    [System.SerializableAttribute()]
    public partial class KeyPair : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Swampy.Service.IEndpointService")]
    public interface IEndpointService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetEndpoints", ReplyAction="http://tempuri.org/IEndpointService/GetEndpointsResponse")]
        ConfigGen.Swampy.Service.KeyPair[] GetEndpoints(string environment, string[] keys, string callingApplication);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetEndpoints", ReplyAction="http://tempuri.org/IEndpointService/GetEndpointsResponse")]
        System.Threading.Tasks.Task<ConfigGen.Swampy.Service.KeyPair[]> GetEndpointsAsync(string environment, string[] keys, string callingApplication);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetSingleEndpoint", ReplyAction="http://tempuri.org/IEndpointService/GetSingleEndpointResponse")]
        ConfigGen.Swampy.Service.KeyPair GetSingleEndpoint(string environment, string key, string callingApplication);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEndpointService/GetSingleEndpoint", ReplyAction="http://tempuri.org/IEndpointService/GetSingleEndpointResponse")]
        System.Threading.Tasks.Task<ConfigGen.Swampy.Service.KeyPair> GetSingleEndpointAsync(string environment, string key, string callingApplication);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEndpointServiceChannel : ConfigGen.Swampy.Service.IEndpointService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EndpointServiceClient : System.ServiceModel.ClientBase<ConfigGen.Swampy.Service.IEndpointService>, ConfigGen.Swampy.Service.IEndpointService {
        
        public EndpointServiceClient() {
        }
        
        public EndpointServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EndpointServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EndpointServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EndpointServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ConfigGen.Swampy.Service.KeyPair[] GetEndpoints(string environment, string[] keys, string callingApplication) {
            return base.Channel.GetEndpoints(environment, keys, callingApplication);
        }
        
        public System.Threading.Tasks.Task<ConfigGen.Swampy.Service.KeyPair[]> GetEndpointsAsync(string environment, string[] keys, string callingApplication) {
            return base.Channel.GetEndpointsAsync(environment, keys, callingApplication);
        }
        
        public ConfigGen.Swampy.Service.KeyPair GetSingleEndpoint(string environment, string key, string callingApplication) {
            return base.Channel.GetSingleEndpoint(environment, key, callingApplication);
        }
        
        public System.Threading.Tasks.Task<ConfigGen.Swampy.Service.KeyPair> GetSingleEndpointAsync(string environment, string key, string callingApplication) {
            return base.Channel.GetSingleEndpointAsync(environment, key, callingApplication);
        }
    }
}
